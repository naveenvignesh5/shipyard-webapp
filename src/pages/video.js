import React, { Component } from "react";
import Video from 'twilio-video';
import { connect } from 'react-redux';

import { withRouter } from "react-router-dom";

import Navbar from "../components/Navbar";

import "../styles/video.css";

class VideoPage extends Component {
  static getDerivedStateFromProps = (nextProps) => {
    const { user } = nextProps;
    if (user && user.token && user.username) {
      return {
        identity: user.username,
        token: user.token,
      };
    }
    return null;
  }

  state = {
    identity: null /* Will hold the fake name assigned to the client. The name is generated by faker on the server */,
    roomName: "" /* Will store the room name */,
    roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */,
    previewTracks: null,
    localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,
    hasJoinedRoom: false,
    token: "",
    activeRoom: null // Track the current active room
  };

  componentDidMount() {
    console.log(this.props.match.params.id);
  }

  handleJoinRoom = () => {
    const { match, user } = this.props;
    this.setState({
      roomName: match.params.id,
      identity: user.username,
    }, () => {
      this.joinRoom();
    });
  }

  joinRoom = () => {
    if (!this.state.roomName.trim()) {
      this.setState({ roomNameErr: true });
      return;
    }

    console.log("Joining room '" + this.state.roomName + "'...");
    let connectOptions = {
      name: this.state.roomName
    };

    if (this.state.previewTracks) {
      connectOptions.tracks = this.state.previewTracks;
    }

    // Join the Room with the token from the server and the
    // LocalParticipant's Tracks.
    Video.connect(this.state.token, connectOptions).then(
      this.roomJoined,
      error => {
        console.log(error);
        alert("Could not connect to Twilio: " + error.message);
      }
    );
  };

  attachTracks = (tracks, container) => {
    tracks.forEach(track => {
      container.appendChild(track.attach());
    });
  };

  // Attaches a track to a specified DOM container
  attachParticipantTracks = (participant, container) => {
    const tracks = Array.from(participant.tracks.values());
    this.attachTracks(tracks, container);
  };

  detachTracks = tracks => {
    tracks.forEach(track => {
      track.detach().forEach(detachedElement => {
        detachedElement.remove();
      });
    });
  };

  detachParticipantTracks = participant => {
    const tracks = Array.from(participant.tracks.values());
    this.detachTracks(tracks);
  };

  leaveRoom = () => {
    this.state.activeRoom.disconnect();
    this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
  };

  roomJoined = room => {
    // Called when a participant joins a room
    console.log("Joined as '" + this.state.identity + "'");
    this.setState({
      activeRoom: room,
      localMediaAvailable: true,
      hasJoinedRoom: true
    });

    // Attach LocalParticipant's Tracks, if not already attached.
    var previewContainer = this.localMedia;
    if (!previewContainer.querySelector("video")) {
      this.attachParticipantTracks(room.localParticipant, previewContainer);
    }

    // Attach the Tracks of the Room's Participants.
    room.participants.forEach(participant => {
      console.log("Already in Room: '" + participant.identity + "'");
      previewContainer = this.remoteMedia;
      this.attachParticipantTracks(participant, previewContainer);
    });

    // When a Participant joins the Room, log the event.
    room.on("participantConnected", participant => {
      console.log("Joining: '" + participant.identity + "'");
    });

    // When a Participant adds a Track, attach it to the DOM.
    room.on("trackSubscribed", (track, participant) => {
      console.log(participant.identity + " added track: " + track.kind);
      var previewContainer = this.remoteMedia;
      this.attachTracks([track], previewContainer);
    });

    // When a Participant removes a Track, detach it from the DOM.
    room.on("trackUnsubscribed", (track, participant) => {
      this.log(participant.identity + " removed track: " + track.kind);
      this.detachTracks([track]);
    });

    // When a Participant leaves the Room, detach its Tracks.
    room.on("participantDisconnected", participant => {
      console.log("Participant '" + participant.identity + "' left the room");
      this.detachParticipantTracks(participant);
    });

    // Once the LocalParticipant leaves the room, detach the Tracks
    // of all Participants, including that of the LocalParticipant.
    room.on("disconnected", () => {
      if (this.state.previewTracks) {
        this.state.previewTracks.forEach(track => {
          track.stop();
        });
      }
      this.detachParticipantTracks(room.localParticipant);
      room.participants.forEach(this.detachParticipantTracks);
      this.setState({
        activeRoom: null,
        hasJoinedRoom: false,
        localMediaAvailable: false
      });
    });
  };

  render() {
    const { hasJoinedRoom } = this.state;
    return (
      <div className="container-fluid">
        <Navbar />
        <div className="video-dashboard">
          {hasJoinedRoom ? (
            <div>
              <div
                className="flex-item"
                ref={e => (this.localMedia = e)}
                id="local-media"
              />
              <div
                className="flex-item"
                ref={e => (this.remoteMedia = e)}
                id="remote-media"
              />
            </div>
          ) : (
            <button type="button" className="btn btn-primary" onClick={this.handleJoinRoom}>
              Join Room
            </button>
          )}
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  user: state.auth.user,
});

export default withRouter(connect(mapStateToProps)(VideoPage));
